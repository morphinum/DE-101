https://www.youtube.com/watch?v=O8N1lvkIjig&t=1266s
- netstat -tulpen
- ip a — просмотр ip адреса нашего сервера (лучше использовать hostname -I)

[] - необязательные параметры


==================================================================================================================================
terminal
==================================================================================================================================
- docker system prune -a --volumes — полная очистка docker (предварительно все контейнеры должны быть остановлены)

- docker pull image_name — скачивание образа 
- docker run [опции] image_name [echo "команда"] — создание контейнера [с командой при запуске]
    --rm удаление контейнера после окончания его работы
      -d создание контейнера на фоне (detached mode), то есть консоль будет доступна при его работе
  --name container_name дает название контейнеру
      -p 8080:80 — port maping, передает порт (точнее 2), первый порт - хоста, второй - контейнера.
      -P устанавливает рандомный порт
      -v создает volumes, 

- docker start CONTAINER_ID — запуск уже существующего контейнер
- docker ps — просмотр всех запущеных контейнеров
- docker ps -a — просмотр всех созданных контейнеров (включая незапущеные)
- docker iamges — просмотр всех образов

- docker inspect CONTAINER_ID — 
- docker stats [CONTAINER_ID] — просмотр задействованных ресурсов [определенного контейнера]
- docker logs CONTAINER_ID [опции] — мониторинг процессов
    -f позволяется моиторить логи в реальном времени
- docker exec -it CONTAINER_ID //bin//bash — прямое подключение в док-контейнер в интерактивном режиме

- docker rm CONTAINER_ID — удаление контейнера
- docker rmi IMAGE_ID — удаление образа

- docker pause CONTAINER_ID — ставим на паузу контейнер
- docker unpause CONTAINER_ID — выводим из паузы контейнер

- docker stop CONTAINER_ID — мягкая остановка контейнера
- docker stop $(docker ps -a -q) — мягая остановка всех контейнеров
- docker kill CONTAINER_ID - грубая остановка контейнера
==================================================================================================================================
network
==================================================================================================================================
- docker network create --driver bridge NETWORK_NAME — создание сети с типом сети bridge
- sudo docker network create -d bridge --subnet 192.168.10.0/24 --gateway 192.168.10.1 NETWORK_NAME — создание сети с типом сети bridge (subnet), ip адрес и маску подсети, куда идут пакеты (gateway)

- docker run --net NETWORK_NAME IMAGE_NAME — запуск образа в сети NETWORK_NAME

- docker network ls — перечисляет все сети
- docker network inspect NETWORK_NAME — настройки сети
==================================================================================================================================
dockerfile
==================================================================================================================================
 - docker build -t docker:v01 DIR_NAME — создание образа с именем docker и тэгом v01 (-t), 

FROM ubuntu:22.04
LABEL LABEL_name=discription — простое описание, лэйблов может быть много
EXPOSE discriptin — ДОПИСАТЬ, но выглядит как то же описание, только при docker ps в PORTS видны
ENTRYPOINT ["команда"...] — неизменяемо и выполняется всегда
CMD ["команда"...] — изменяемо и поэтому может не выполнятся, так как переписывается
